ACTIVITY,NOTE,BRANCH,mvp

TODO,,resilience

risk-leadership,in 'Team Empowerment'; refactor (include continuously improve; onboard management; review activities),initial,lm
continuously-improve-your-security-belt-rank,in 'Team Empowerment' as 'continuously improve',initial,lm
onboard-management-in-security,in 'Team Empowerment',initial,lm
review-security-belt-activities,in 'Team Empowerment' as 'review activities',initial,lm
integration-of-vulnerability-issues-into-the-development-process,refactor (meta-activity; alles was du findest musst du auch behandeln),initial

simple-mob-hacking,awareness activity,teamwork,l
regular-advanced-mob-hacking,does this have to be regular or is this also awareness?,teamwork
creation-of-evil-user-stories,as awareness activity (TODO ask Sven for feedback),teamwork+requirements,m
simple-visualization-of-defects,,teamwork,l
Security-Lessoned-Learned,,teamwork+community
Advanced visualization of defects,,teamwork
Definition of simple BCDR practices for critical components,,teamwork
team-has-a-security-champion,delete (wert?),teamwork

security-code-review,,coding
prevent-secrets-in-source-code,,coding+secrets,lm
code-review,,coding
static-analysis-for-all-self-written-components,refactor (do not differenciate between server/client),coding,lm
Static analysis for important client side components,refactor (do not differenciate between server/client),coding,lm

test-components-regarding-known-vulnerabilities,refactor (test location with most dependencies -> complete coverage [do not differenciate between server/client]),dependencies,lm
test-client-side-components-with-known-vulnerabilities,refactor (test location with most dependencies -> complete coverage [do not differenciate between server/client]),dependencies,lm
nightly-test-libraries-with-known-vulnerabilities,,dependencies,lm
nightly-dependency-version-upgrade,,dependencies,lm
ensure-only-using-components-which-are-under-active-development,,dependencies,lm
Do you regularly evaluate the lifecycle state and support status of every software asset and underlying infrastructure component and estimate their end of life?,,dependencies
test-container-images-regarding-known-vulnerabilities,,dependencies

backup-before-deployment,refactor (backup ist nicht immer die beste strategie),deployment
same-artifact-for-environments,,deployment,m

logging-of-security-events,,incident,m
logging-concept,rename (to 'Profound Logging'),incident,m
Visualized logging,,incident+teamwork

environment-dependent-configuration-parameters,,config+deployment,(m)
test-security-configuration-of-cloud-environments,,config,m
test-security-configuration-of-infrastructure,,config
Handover of confidential parameters,,config+secrets
Practice proper lifecycle management for application secrets,,config+secrets
test-for-default-credentials,,config+secrets

api-fuzzing,,api,m
testing-for-bypassing-authentication-schema,,api
Coverage of more input vectors,,api
dynamic-scan-for-security-vulnerabilities,,network,l
Dynamic Scan With Different Roles,,network,l
Do you perform denial of service and security stress testing?,,network
Testing for Weaker Authentication in Alternative Channel,,network+api
unit-tests-for-security-features,,network+coding+api
load-tests,,network+coding

Creation of Application Metrics,,metrics+incident
Simple Visualization of Metrics,,metrics+incident
Targeted Alerting on Metric Violations,,metrics+incident
Creation of System Metrics,,metrics+incident
Coverage and control metrics,,metrics+incident
Testing for Weak Password Change or Reset Functionalities
Testing for Browser Cache Weaknesses
Advanced availability and stability metrics,,metrics+incident
Advanced web application metrics,,metrics+incident
Defense metrics,,metrics+incident
Screens with metric visualization,,metrics+incident
Metrics are combined with tests,,metrics+incident

shared-security-services,refactor (nutze service provider mit der richtigen abstraktion),design
get-to-know-your-design-flaws,,coding+api+network+design,l
follow-security-by-design-principles,maybe too big?,coding+api+network+design,lm
conduction-of-threat-modeling,,network+design,lm
Test network segmentation,,network+design

Limit access to application secrets according to the least privilege principle,,secrets

Do you base your design on available reference architectures?
Reduction of the attack surface
Security integration tests for important components / Integration/E2E tests for security features
Testing for Browser Cache Weaknesses
Conduction of collaborative team security checks
Test the definition of virtualized environments
Usage of trusted images

do-not-start-alone,delete
get-to-know-your-security-policies,delete
think-about-where-the-journey-is-going,delete
continuous-integration,delete (this can be a requirement for other activities but shouldn't be part of the model)
definition-of-quality-gates,delete (meta-activity) (FIXME build in corresponding acitvities -> how to (review))
false-positive-treatment,delete (meta-activity)
security-consulting-on-request,delete (kein Wert)
regular-security-training-for-everyone,delete (model should not include trainings)
regular-security-training-of-security-champions,delete (model should not include trainings)
Usage of multiple scanners,delete (gut praxis fuer alle tools; keine eigene activity),network
treatment-of-vulnerabilities-with-severity-high-or-higher,delete (meta-activity)
Treatment of Vulnerabilities With Severity Medium,delete (meta-activity)
Infrastructure as Code,delete (this can be a requirement for other activities but shouldn't be part of the model)
Coverage analysis,delete (meta-acitivity?)
Enrich Threat model with Checks for Security by Design Principles,delete (reicht hier nicht wenn 'Security by Design' nach 'Threat model' kommt?)
Know your Attack Surface,delete (ist das mehr als Threat modeling?)
Defined deployment process,delete (ergibt sich durch die activities automatisch)
Deactivating of unneeded tests,delete (meta-activity)
Application specific tool settings,delete (what? meta-activity?)
Treatment of defects with medium accuracy and any criticality,delete (meta-activity)
Signing of code,delete (value?)
Usage of multiple scanners,delete (value?)
Static analysis for all components/libraries,delete (nach Krebs heilen und Weltfrieden oder vorher?)
Smoke Test,delete (value for security?)
Business Logic Testing,delete (value?)
Defined build process,delete (ergibt sich durch die activities automatisch)
Inventory of running artifacts,delete (braucht man das wirklich wenn man CI am start hat?)
Coverage of sequential operations,delete (ist das gleiche wie Business Logic Testing)
Coverage of client side dynamic components,delete (do not differenciate between server/client)